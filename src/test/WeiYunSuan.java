package test;

/**
 * @ Author:kn
 * @ Description:
 * @ Date:Created in 2019/3/19 11:18
 * @ Modified By:
 */

/**
 * 一.原码
 * 1>.正数的原码就是它的本身
 * 　　假设使用一个字节存储整数，整数10的原码是：0000 1010
 * 2>.负数用最高位是1表示负数
 * 　　假设使用一个字节存储整数，整数-10的原码是：1000 1010
 *
 * 二.反码
 * 1>.正数的反码跟原码一样
 * 　　假设使用一个字节存储整数，整数10的反码是：0000 1010
 * 2>.负数的反码是负数的原码按位取反（0变1,1变0），符号位不变
 * 　　假设使用一个字节存储整数，整数-10的反码是：1111 0101
 *
 * 三.补码（再次强调，整数的补码才是在计算机中的存储形式。）
 * 1>.正数的补码和原码一样
 * 　　假设使用一个字节存储整数，整数10的补码是：0000 1010（第三次强调：这一串是10这个整数在计算机中存储形式）
 * 2>.负数的补码是负数的反码加1
 * 　　假设使用一个字节存储整数，整数-10的补码是：1111 0110（第三次强调：这一串是-10这个整数在计算机中存储形式）
 */
public class WeiYunSuan {
    public static void main(String[] args) {
        /**
         * &：按位与。 只有两个操作数对应位同为1时，结果为1，其余全为0. （或者是只要有一个操作数为0，结果就为0）。
         * |：按位或。 只有两个操作数对应位同为0时，结果为0，其余全为1.（或者是只要有一个操作数为1，结果就为1）。
         * ~：按位非。 取反
         * ^：按位异或。异：1 不同取1
         * <<：左位移运算符。    左移是乘以2的幂，对应着右移则是除以2的幂。
         * >>：右位移运算符。
         * >>>：无符号右移运算符。低位溢出，高位补0。注意，无符号右移（>>>）中的符号位（最高位）也跟着变，无符号的意思是将符号位当作数字位看待
         */
        int i6 = 3 & 5;
        int i7 = 3 | 5;
        int i8 = 3 ^ 5;
        int i9 = ~3;
        int i10 = 3 >> 2;
        int i11 = 5 ^ 8;
        int i = 2 ^ 3;
    }
}
